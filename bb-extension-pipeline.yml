# Setting the name effectively sets the Build.BuildNumber variable
# Older doc on version number details: https://github.com/MicrosoftDocs/vsts-docs/blob/e5d4e6f62d381a0d78b2c3dba7ffeedcf25be73a/docs/pipelines/build/options.md
name: 1.1.0$(Rev:.r)

trigger:
    branches:
        include:
        - master
    paths:
        include:
        - client/*
        - web/*
        - bb-extension-pipeline.yml
        - publish-client.sh
        - build.sh
        - version-client.sh

pr:
    branches:
        include:
        - master
    paths:
        include:
        - client/*
        - web/*
        - bb-extension-pipeline.yml
        - build.sh
        - version-client.sh

pool:
  vmImage: 'ubuntu-16.04'

variables:
  buildConfiguration: 'Release'

steps:

- script: sudo chmod 777 build.sh
  displayName: 'Making build.sh executable'

- script: |
    sudo apt-get install zip
    sudo apt-get install jq
    sudo apt-get install wget
    sudo npm install -g gulp yarn
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    sudo dpkg -i google-chrome-stable_current_amd64.deb
    which google-chrome
    cd client
    sudo npm install
    cd ../web
    sudo yarn install
    cd ..
  displayName: 'Installing build tools and project dependencies'

- script: |
    sudo export CHROME_BIN=/usr/bin/google-chrome
    sudo ./test.sh
  displayName: 'Running tests'

# Publish Test Results
- task: PublishTestResults@2
  displayName: 'Publishing test results'
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
    testResultsFiles: '**/test.results.xml' 
    searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
    mergeTestResults: true
    failTaskOnFailedTests: true

# Publish code coverage results
- task: PublishCodeCoverageResults@1
  displayName: 'Publish coverage results'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage/**/coverage.xml'

- script: |
    sudo ./build.sh
    sudo ./version-client.sh $(Build.BuildNumber)
  displayName: 'Building extension for release'

- script: |
    cd client/dist
    sudo zip -r package.zip *
    cp package.zip $(Build.ArtifactStagingDirectory)
  displayName: 'Packaging extension'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

# Publish build artifacts to Azure Pipelines/TFS
- task: PublishBuildArtifacts@1
  displayName: 'Publishing build artifact'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'drop' 
    #publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    #parallel: false # Optional
    #parallelCount: # Optional

- script: |
    cp client/dist/package.zip .
    sudo ./publish-client.sh "$(ClientId)" "$CLIENT_SECRET" "$REFRESH_TOKEN"
  displayName: 'Publishing extension to testers'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  env: 
    CLIENT_SECRET: $(ClientSecret)
    REFRESH_TOKEN: $(RefreshToken)